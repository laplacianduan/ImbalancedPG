n=10
p=5
X<- matrix(rnorm(n*p),5)
X<- matrix(rnorm(n*p),10)
Z<- runif(10)
t(X)%*%diag(Z)%*% X
XZX<- t(X)%*%diag(Z)%*% X
svdX<- svd(X)
D<- svdX$d
U<- svdX$u
D<- svdX$d
V<- svdX$v
U%*%diag(D)%*%V
X-U%*%diag(D)%*%V
X-U%*%diag(D)%*%t(V)
U%*%diag(D)%*%t(V)
U
v
V
t(V)%*%V
U%*%t(U)
t(U) %*% U
t(U) %*% U
t(U) %*% Z %*% U
t(U) %*% diag(Z) %*% U
x <- rnorm(50)
y <- runif(30)
ks.test(x, y)
setwd("c:/Users/leo/git/calibratedDA/code-for-submission/")
require("coda")
N<- 1E4
X0<- 1
X1<- rnorm(N, 1, 1)
X<- cbind(X0,X1)
beta<- c(-6,3)
Xbeta<- X%*%beta
theta<-  exp(Xbeta)
y <- rpois(N,theta)
hist(y, breaks = 30)
hist(log(y+1),breaks = 30)
source("poissonCDA.r")
fit.PolyaGamma <-poissonCDA(y,X, burnin = 200, run = 1000, fixR = T,r_ini = 1, lambda = 1000,MH = F)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  100,auto.layout=F)
fit.CDA <- poissonCDA(y,X, burnin = 200, run = 1000)
fit.CDA <- poissonCDA(y,X, burnin = 200, run = 1000, c0=0.1)
par(mfrow=c(1,2))
autocorr.plot(fit.CDA$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  100,auto.layout=F)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  100,auto.layout=F)
source("probitCDA.r")
install.packages("truncnorm")
install.packages("coda")
source("probitCDA.r")
require("coda")
N <- 1E4
X0 <- 1
X1 <- rnorm(N, 1, 1)
X2 <- rnorm(N, 1, 1)
X <- cbind(X0, X1,X2)
beta <- c(-5, 1,-1)
theta <- pnorm(X %*% beta)
y <- as.numeric(runif(N) < theta)
sum(y)
fit.AlbertChib <-probitCDA(y,X, burnin = 500, run = 1000, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.AlbertChib$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.AlbertChib$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,3],lag.max =  40,auto.layout=F)
fit.CDA <-probitCDA(y,X, burnin = 500, run = 1000)
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,3],lag.max =  40,auto.layout=F)
fit.CDA$accept_rate
install.packages("BayesLogit")
require("coda")
N<- 1E4
X0<- 1
X1<- rnorm(N, 1, 1)
X<- cbind(X0,X1)
beta<- c(-8,1)
Xbeta<- X%*%beta
theta<-  exp(Xbeta)/(1+exp(Xbeta))
y <- as.numeric(runif(N) < theta)
sum(y)
source("logitCDA.r")
fit.PolyaGamma <-logitCDA(y,X, burnin = 200, run = 500, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  40,auto.layout=F)
fit.CDA <-logitCDA(y,X, burnin = 200, run = 500)
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
fit.CDA$beta
fit.CDA$accept_rate
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
fit.CDA <-logitCDA(y,X, burnin = 200, run = 500)
fit.CDA <-logitCDA(y,X, burnin = 200, run = 500)
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
fit.PolyaGamma <-logitCDA(y,X, burnin = 200, run = 500, fixR = T,r_ini = 1)
fit.CDA <-logitCDA(y,X, burnin = 200, run = 500)
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
fit.PolyaGamma <-logitCDA(y,X, burnin = 200, run = 500, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  40,auto.layout=F)
require("coda")
N<- 1E4
#generate data using Beta= (-6,3)
X0<- 1
X1<- rnorm(N, 1, 1)
X<- cbind(X0,X1)
beta<- c(-6,3)
Xbeta<- X%*%beta
theta<-  exp(Xbeta)
#generate Poisson outcomes
y <- rpois(N,theta)
hist(y, breaks = 30)
hist(log(y+1),breaks = 30)
source("poissonCDA.r")
fit.CDA <- poissonCDA(y,X, burnin = 200, run = 1000)
source("probitCDA.r")
require("coda")
#generate data using Beta= (-5,1,-1)
N <- 1E4
X0 <- 1
X1 <- rnorm(N, 1, 1)
X2 <- rnorm(N, 1, 1)
X <- cbind(X0, X1,X2)
beta <- c(-5, 1,-1)
theta <- pnorm(X %*% beta)
#generate Bernoulli outcomes
y <- as.numeric(runif(N) < theta)
#total number of positive outcomes
sum(y)
fit.AlbertChib <-probitCDA(y,X, burnin = 500, run = 1000, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.AlbertChib$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.AlbertChib$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,3],lag.max =  40,auto.layout=F)
fit.CDA <-probitCDA(y,X, burnin = 500, run = 1000)
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,3],lag.max =  40,auto.layout=F)
source('/mnt/c/Users/leo/git/calibratedDA/code-for-submission/logitCDA.r')
source("probitCDA.r")
require("coda")
#generate data using Beta= (-5,1,-1)
N <- 1E4
X0 <- 1
X1 <- rnorm(N, 1, 1)
X2 <- rnorm(N, 1, 1)
X <- cbind(X0, X1,X2)
beta <- c(-5, 1,-1)
theta <- pnorm(X %*% beta)
#generate Bernoulli outcomes
y <- as.numeric(runif(N) < theta)
#total number of positive outcomes
sum(y)
fit.AlbertChib <-probitCDA(y,X, burnin = 500, run = 1000, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.AlbertChib$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.AlbertChib$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.AlbertChib$beta[,3],lag.max =  40,auto.layout=F)
fit.CDA <-probitCDA(y,X, burnin = 500, run = 1000)
#traceplot
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,3))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,3],lag.max =  40,auto.layout=F)
require("coda")
N<- 1E4
#generate data using Beta= (-8,1)
X0<- 1
X1<- rnorm(N, 1, 1)
X<- cbind(X0,X1)
beta<- c(-8,1)
Xbeta<- X%*%beta
theta<-  exp(Xbeta)/(1+exp(Xbeta))
#generate Bernoulli outcomes
y <- as.numeric(runif(N) < theta)
#total number of positive outcomes
sum(y)
source("logitCDA.r")
fit.PolyaGamma <-logitCDA(y,X, burnin = 200, run = 500, fixR = T,r_ini = 1)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  40,auto.layout=F)
fit.CDA <-logitCDA(y,X, burnin = 200, run = 500)
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
par(mfrow=c(1,2))
autocorr.plot(fit.CDA$beta[,1],lag.max =  40,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  40,auto.layout=F)
require("coda")
N<- 1E4
#generate data using Beta= (-6,3)
X0<- 1
X1<- rnorm(N, 1, 1)
X<- cbind(X0,X1)
beta<- c(-6,3)
Xbeta<- X%*%beta
theta<-  exp(Xbeta)
#generate Poisson outcomes
y <- rpois(N,theta)
hist(y, breaks = 30)
hist(log(y+1),breaks = 30)
source("poissonCDA.r")
fit.PolyaGamma <-poissonCDA(y,X, burnin = 200, run = 1000, fixR = T,r_ini = 1, lambda = 1000,MH = F)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  100,auto.layout=F)
fit.PolyaGamma <-poissonCDA(y,X, burnin = 200, run = 1000, fixR = T,r_ini = 1, lambda = 1E9,MH = F)
par(mfrow=c(1,1))
ts.plot(fit.PolyaGamma$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.PolyaGamma$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.PolyaGamma$beta[,2],lag.max =  100,auto.layout=F)
fit.CDA <- poissonCDA(y,X, burnin = 200, run = 1000)
par(mfrow=c(1,1))
ts.plot(fit.CDA$beta)
par(mfrow=c(1,2))
autocorr.plot(fit.CDA$beta[,1],lag.max =  100,auto.layout=F)
autocorr.plot(fit.CDA$beta[,2],lag.max =  100,auto.layout=F)
